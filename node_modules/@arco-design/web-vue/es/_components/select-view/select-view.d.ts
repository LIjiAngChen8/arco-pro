import type { PropType } from 'vue';
import type { Data } from '../../_utils/types';
import { TagData } from '../../input-tag/interface';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<TagData | TagData[]>;
    };
    inputValue: StringConstructor;
    placeholder: StringConstructor;
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    opened: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<"mini" | "small" | "medium" | "large">;
        default: string;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowClear: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowCreate: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowSearch: {
        type: BooleanConstructor;
        default: (props: Data) => boolean;
    };
    maxTagCount: {
        type: NumberConstructor;
        default: number;
    };
    formatLabel: {
        type: FunctionConstructor;
    };
    retainInputValue: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    inputRef: import("vue").ComputedRef<HTMLInputElement>;
    render: () => JSX.Element;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "remove")[], "clear" | "remove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    inputValue?: unknown;
    placeholder?: unknown;
    disabled?: unknown;
    error?: unknown;
    loading?: unknown;
    opened?: unknown;
    size?: unknown;
    bordered?: unknown;
    multiple?: unknown;
    allowClear?: unknown;
    allowCreate?: unknown;
    allowSearch?: unknown;
    maxTagCount?: unknown;
    formatLabel?: unknown;
    retainInputValue?: unknown;
} & {
    size: "mini" | "small" | "medium" | "large";
    disabled: boolean;
    multiple: boolean;
    error: boolean;
    loading: boolean;
    allowClear: boolean;
    retainInputValue: boolean;
    opened: boolean;
    bordered: boolean;
    allowCreate: boolean;
    allowSearch: boolean;
    maxTagCount: number;
} & {
    modelValue?: TagData | TagData[] | undefined;
    placeholder?: string | undefined;
    inputValue?: string | undefined;
    formatLabel?: Function | undefined;
}> & {
    onClear?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
}, {
    size: "mini" | "small" | "medium" | "large";
    disabled: boolean;
    multiple: boolean;
    error: boolean;
    loading: boolean;
    allowClear: boolean;
    retainInputValue: boolean;
    opened: boolean;
    bordered: boolean;
    allowCreate: boolean;
    allowSearch: boolean;
    maxTagCount: number;
}>;
export default _default;
