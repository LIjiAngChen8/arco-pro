import { PropType } from 'vue';
import { TagData } from '../../input-tag/interface';
declare const _default: import("vue").DefineComponent<{
    modelValue: PropType<TagData>;
    inputValue: StringConstructor;
    enabledInput: BooleanConstructor;
    formatLabel: FunctionConstructor;
    placeholder: StringConstructor;
    retainInputValue: BooleanConstructor;
    disabled: BooleanConstructor;
    baseCls: StringConstructor;
    size: StringConstructor;
    error: BooleanConstructor;
    focused: BooleanConstructor;
}, {
    inputRef: import("vue").Ref<HTMLInputElement | undefined>;
    render: () => JSX.Element;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:inputValue" | "inputValueChange" | "focus" | "blur")[], "update:inputValue" | "inputValueChange" | "focus" | "blur", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    inputValue?: unknown;
    enabledInput?: unknown;
    formatLabel?: unknown;
    placeholder?: unknown;
    retainInputValue?: unknown;
    disabled?: unknown;
    baseCls?: unknown;
    size?: unknown;
    error?: unknown;
    focused?: unknown;
} & {
    disabled: boolean;
    error: boolean;
    focused: boolean;
    enabledInput: boolean;
    retainInputValue: boolean;
} & {
    size?: string | undefined;
    modelValue?: TagData | undefined;
    placeholder?: string | undefined;
    inputValue?: string | undefined;
    formatLabel?: Function | undefined;
    baseCls?: string | undefined;
}> & {
    "onUpdate:inputValue"?: ((...args: any[]) => any) | undefined;
    onInputValueChange?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    error: boolean;
    focused: boolean;
    enabledInput: boolean;
    retainInputValue: boolean;
}>;
export default _default;
