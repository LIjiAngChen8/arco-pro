import { PropType } from 'vue';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    modelValue: NumberConstructor;
    defaultValue: NumberConstructor;
    mode: {
        type: PropType<"button" | "embed">;
        default: string;
        validator: (value: any) => boolean;
    };
    precision: NumberConstructor;
    step: {
        type: NumberConstructor;
        default: number;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    formatter: {
        type: FunctionConstructor;
    };
    parser: {
        type: FunctionConstructor;
    };
    placeholder: StringConstructor;
    hideButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<"mini" | "small" | "medium" | "large">;
        default: string;
        validator: (value: any) => boolean;
    };
    onChange: {
        type: PropType<EmitType<(value: number | undefined) => void>>;
    };
    onFocus: {
        type: PropType<EmitType<(ev: FocusEvent) => void>>;
    };
    onBlur: {
        type: PropType<EmitType<(ev: FocusEvent) => void>>;
    };
}, {
    inputRef: import("vue").Ref<HTMLInputElement | undefined>;
    render: () => JSX.Element;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change" | "focus" | "blur")[], "update:modelValue" | "change" | "focus" | "blur", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    mode?: unknown;
    precision?: unknown;
    step?: unknown;
    disabled?: unknown;
    max?: unknown;
    min?: unknown;
    formatter?: unknown;
    parser?: unknown;
    placeholder?: unknown;
    hideButton?: unknown;
    size?: unknown;
    onChange?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
} & {
    size: "mini" | "small" | "medium" | "large";
    disabled: boolean;
    mode: "button" | "embed";
    step: number;
    max: number;
    min: number;
    hideButton: boolean;
} & {
    onChange?: EmitType<(value: number | undefined) => void> | undefined;
    modelValue?: number | undefined;
    defaultValue?: number | undefined;
    placeholder?: string | undefined;
    onFocus?: EmitType<(ev: FocusEvent) => void> | undefined;
    onBlur?: EmitType<(ev: FocusEvent) => void> | undefined;
    precision?: number | undefined;
    formatter?: Function | undefined;
    parser?: Function | undefined;
}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
}, {
    size: "mini" | "small" | "medium" | "large";
    disabled: boolean;
    mode: "button" | "embed";
    step: number;
    max: number;
    min: number;
    hideButton: boolean;
}>;
export default _default;
