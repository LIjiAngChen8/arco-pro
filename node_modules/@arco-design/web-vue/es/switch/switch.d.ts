import type { PropType } from 'vue';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    defaultChecked: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: PropType<"circle" | "line" | "round">;
        default: string;
    };
    size: {
        type: PropType<"small" | "medium">;
        default: string;
    };
    checkedValue: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: boolean;
    };
    uncheckedValue: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: boolean;
    };
    checkedColor: {
        type: StringConstructor;
    };
    uncheckedColor: {
        type: StringConstructor;
    };
    onChange: {
        type: PropType<EmitType<(value: boolean | string | number) => void>>;
    };
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    buttonStyle: import("vue").ComputedRef<{
        backgroundColor: string;
    } | undefined>;
    computedCheck: import("vue").ComputedRef<boolean>;
    handleClick: (ev: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change")[], "update:modelValue" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultChecked?: unknown;
    disabled?: unknown;
    loading?: unknown;
    type?: unknown;
    size?: unknown;
    checkedValue?: unknown;
    uncheckedValue?: unknown;
    checkedColor?: unknown;
    uncheckedColor?: unknown;
    onChange?: unknown;
} & {
    size: "small" | "medium";
    disabled: boolean;
    defaultChecked: boolean;
    loading: boolean;
    type: "circle" | "line" | "round";
    checkedValue: string | number | boolean;
    uncheckedValue: string | number | boolean;
} & {
    onChange?: EmitType<(value: boolean | string | number) => void> | undefined;
    modelValue?: string | number | boolean | undefined;
    checkedColor?: string | undefined;
    uncheckedColor?: string | undefined;
}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    size: "small" | "medium";
    disabled: boolean;
    modelValue: string | number | boolean;
    defaultChecked: boolean;
    loading: boolean;
    type: "circle" | "line" | "round";
    checkedValue: string | number | boolean;
    uncheckedValue: string | number | boolean;
}>;
export default _default;
