import type { PropType } from 'vue';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    type: {
        type: PropType<"text" | "dashed" | "outline" | "primary" | "secondary">;
        default: string;
        validator: (value: any) => boolean;
    };
    shape: {
        type: PropType<"circle" | "round" | "square">;
        default: string;
        validator: (value: any) => boolean;
    };
    status: {
        type: PropType<"normal" | "success" | "warning" | "danger">;
        default: string;
    };
    size: {
        type: PropType<"mini" | "small" | "medium" | "large">;
        default: string;
        validator: (value: any) => boolean;
    };
    long: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    htmlType: {
        type: StringConstructor;
        default: string;
    };
    href: StringConstructor;
    onClick: {
        type: PropType<EmitType<(ev: MouseEvent) => void>>;
    };
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    handleClick: (e: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    type?: unknown;
    shape?: unknown;
    status?: unknown;
    size?: unknown;
    long?: unknown;
    loading?: unknown;
    disabled?: unknown;
    htmlType?: unknown;
    href?: unknown;
    onClick?: unknown;
} & {
    size: "mini" | "small" | "medium" | "large";
    disabled: boolean;
    long: boolean;
    loading: boolean;
    type: "text" | "dashed" | "outline" | "primary" | "secondary";
    shape: "circle" | "round" | "square";
    status: "normal" | "success" | "warning" | "danger";
    htmlType: string;
} & {
    onClick?: EmitType<(ev: MouseEvent) => void> | undefined;
    href?: string | undefined;
}> & {
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    size: "mini" | "small" | "medium" | "large";
    disabled: boolean;
    long: boolean;
    loading: boolean;
    type: "text" | "dashed" | "outline" | "primary" | "secondary";
    shape: "circle" | "round" | "square";
    status: "normal" | "success" | "warning" | "danger";
    htmlType: string;
}>;
export default _default;
