import { PropType } from 'vue';
import { Option, FilterOption } from '../select/interface';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: StringConstructor;
        default: undefined;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    data: {
        type: PropType<Option[]>;
        default: () => never[];
    };
    popupContainer: {
        type: PropType<string | HTMLElement | null | undefined>;
    };
    strict: {
        type: BooleanConstructor;
        default: boolean;
    };
    filterOption: {
        type: PropType<FilterOption>;
        default: boolean;
    };
    onChange: {
        type: PropType<EmitType<(value: string) => void>>;
    };
    onSearch: {
        type: PropType<EmitType<(value: string) => void>>;
    };
    onSelect: {
        type: PropType<EmitType<(value: string) => void>>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change" | "select" | "search")[], "update:modelValue" | "change" | "select" | "search", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    disabled?: unknown;
    data?: unknown;
    popupContainer?: unknown;
    strict?: unknown;
    filterOption?: unknown;
    onChange?: unknown;
    onSearch?: unknown;
    onSelect?: unknown;
} & {
    disabled: boolean;
    defaultValue: string;
    filterOption: FilterOption;
    data: Option[];
    strict: boolean;
} & {
    onChange?: EmitType<(value: string) => void> | undefined;
    modelValue?: string | undefined;
    onSelect?: EmitType<(value: string) => void> | undefined;
    popupContainer?: string | HTMLElement | null | undefined;
    onSearch?: EmitType<(value: string) => void> | undefined;
}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onSelect?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    modelValue: string;
    defaultValue: string;
    filterOption: FilterOption;
    data: Option[];
    strict: boolean;
}>;
export default _default;
