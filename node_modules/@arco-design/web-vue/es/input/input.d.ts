import type { PropType } from 'vue';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    modelValue: StringConstructor;
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"mini" | "small" | "medium" | "large">;
        default: string;
        validator: (value: any) => boolean;
    };
    allowClear: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: StringConstructor;
    maxLength: {
        type: PropType<number | {
            length: number;
            errorOnly?: boolean | undefined;
        }>;
        default: number;
    };
    showWordLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    wordLength: {
        type: PropType<(value: string) => number>;
    };
    wordSlice: {
        type: PropType<(value: string, maxLength: number) => string>;
    };
    type: {
        type: PropType<"text" | "password">;
        default: string;
    };
    onInput: {
        type: PropType<EmitType<(value: string, ev: Event) => void>>;
    };
    onChange: {
        type: PropType<EmitType<(value: string, ev: Event) => void>>;
    };
    onPressEnter: {
        type: PropType<EmitType<(ev: KeyboardEvent) => void>>;
    };
    onClear: {
        type: PropType<EmitType<(ev: MouseEvent) => void>>;
    };
    onFocus: {
        type: PropType<EmitType<(ev: FocusEvent) => void>>;
    };
    onBlur: {
        type: PropType<EmitType<(ev: FocusEvent) => void>>;
    };
}, {
    inputRef: import("vue").Ref<HTMLInputElement | undefined>;
    render: () => JSX.Element;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change" | "clear" | "focus" | "blur" | "pressEnter" | "input")[], "update:modelValue" | "change" | "clear" | "focus" | "blur" | "input" | "pressEnter", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    size?: unknown;
    allowClear?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    error?: unknown;
    placeholder?: unknown;
    maxLength?: unknown;
    showWordLimit?: unknown;
    wordLength?: unknown;
    wordSlice?: unknown;
    type?: unknown;
    onInput?: unknown;
    onChange?: unknown;
    onPressEnter?: unknown;
    onClear?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
} & {
    size: "mini" | "small" | "medium" | "large";
    disabled: boolean;
    defaultValue: string;
    error: boolean;
    readonly: boolean;
    allowClear: boolean;
    type: "text" | "password";
    maxLength: number | {
        length: number;
        errorOnly?: boolean | undefined;
    };
    showWordLimit: boolean;
} & {
    onChange?: EmitType<(value: string, ev: Event) => void> | undefined;
    modelValue?: string | undefined;
    placeholder?: string | undefined;
    onClear?: EmitType<(ev: MouseEvent) => void> | undefined;
    onPressEnter?: EmitType<(ev: KeyboardEvent) => void> | undefined;
    onFocus?: EmitType<(ev: FocusEvent) => void> | undefined;
    onBlur?: EmitType<(ev: FocusEvent) => void> | undefined;
    onInput?: EmitType<(value: string, ev: Event) => void> | undefined;
    wordLength?: ((value: string) => number) | undefined;
    wordSlice?: ((value: string, maxLength: number) => string) | undefined;
}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    onPressEnter?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
}, {
    size: "mini" | "small" | "medium" | "large";
    disabled: boolean;
    defaultValue: string;
    error: boolean;
    readonly: boolean;
    allowClear: boolean;
    type: "text" | "password";
    maxLength: number | {
        length: number;
        errorOnly?: boolean | undefined;
    };
    showWordLimit: boolean;
}>;
export default _default;
