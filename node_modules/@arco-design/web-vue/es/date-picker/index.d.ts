import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _DatePicker from './pickers/date-picker';
import _WeekPicker from './pickers/week-picker';
import _MonthPicker from './pickers/month-picker';
import _YearPicker from './pickers/year-picker';
import _QuarterPicker from './pickers/quarter-picker';
import _RangePicker from './range-picker';
declare const DatePicker: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            dayStartOfWeek: 0 | 1;
            showTime: boolean;
            showNowBtn: boolean;
        }> & Omit<Readonly<{
            modelValue?: unknown;
            defaultValue?: unknown;
            format?: unknown;
            dayStartOfWeek?: unknown;
            showTime?: unknown;
            timepickerProps?: unknown;
            disabledTime?: unknown;
            showNowBtn?: unknown;
        } & {
            dayStartOfWeek: 0 | 1;
            showTime: boolean;
            showNowBtn: boolean;
        } & {
            modelValue?: string | number | Date | undefined;
            defaultValue?: string | number | Date | undefined;
            format?: string | ((current: Date) => string) | undefined;
            timepickerProps?: Partial<import("../time-picker/interface").TimePickerProps> | undefined;
            disabledTime?: ((current: Date) => import("./interface").DisabledTimeProps) | undefined;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "dayStartOfWeek" | "showTime" | "showNowBtn">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            modelValue?: unknown;
            defaultValue?: unknown;
            format?: unknown;
            dayStartOfWeek?: unknown;
            showTime?: unknown;
            timepickerProps?: unknown;
            disabledTime?: unknown;
            showNowBtn?: unknown;
        } & {
            dayStartOfWeek: 0 | 1;
            showTime: boolean;
            showNowBtn: boolean;
        } & {
            modelValue?: string | number | Date | undefined;
            defaultValue?: string | number | Date | undefined;
            format?: string | ((current: Date) => string) | undefined;
            timepickerProps?: Partial<import("../time-picker/interface").TimePickerProps> | undefined;
            disabledTime?: ((current: Date) => import("./interface").DisabledTimeProps) | undefined;
        }>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            dayStartOfWeek: 0 | 1;
            showTime: boolean;
            showNowBtn: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        modelValue?: unknown;
        defaultValue?: unknown;
        format?: unknown;
        dayStartOfWeek?: unknown;
        showTime?: unknown;
        timepickerProps?: unknown;
        disabledTime?: unknown;
        showNowBtn?: unknown;
    } & {
        dayStartOfWeek: 0 | 1;
        showTime: boolean;
        showNowBtn: boolean;
    } & {
        modelValue?: string | number | Date | undefined;
        defaultValue?: string | number | Date | undefined;
        format?: string | ((current: Date) => string) | undefined;
        timepickerProps?: Partial<import("../time-picker/interface").TimePickerProps> | undefined;
        disabledTime?: ((current: Date) => import("./interface").DisabledTimeProps) | undefined;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    format?: unknown;
    dayStartOfWeek?: unknown;
    showTime?: unknown;
    timepickerProps?: unknown;
    disabledTime?: unknown;
    showNowBtn?: unknown;
} & {
    dayStartOfWeek: 0 | 1;
    showTime: boolean;
    showNowBtn: boolean;
} & {
    modelValue?: string | number | Date | undefined;
    defaultValue?: string | number | Date | undefined;
    format?: string | ((current: Date) => string) | undefined;
    timepickerProps?: Partial<import("../time-picker/interface").TimePickerProps> | undefined;
    disabledTime?: ((current: Date) => import("./interface").DisabledTimeProps) | undefined;
}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    dayStartOfWeek: 0 | 1;
    showTime: boolean;
    showNowBtn: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    WeekPicker: import("vue").DefineComponent<{
        modelValue: {
            type: (StringConstructor | DateConstructor | NumberConstructor)[];
        };
        defaultValue: {
            type: (StringConstructor | DateConstructor | NumberConstructor)[];
        };
        format: {
            type: StringConstructor;
            default: string;
        };
        dayStartOfWeek: {
            type: import("vue").PropType<0 | 1>;
            default: number;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        modelValue?: unknown;
        defaultValue?: unknown;
        format?: unknown;
        dayStartOfWeek?: unknown;
    } & {
        format: string;
        dayStartOfWeek: 0 | 1;
    } & {
        modelValue?: string | number | Date | undefined;
        defaultValue?: string | number | Date | undefined;
    }>, {
        format: string;
        dayStartOfWeek: 0 | 1;
    }>;
    MonthPicker: import("vue").DefineComponent<{
        modelValue: {
            type: (StringConstructor | DateConstructor | NumberConstructor)[];
        };
        defaultValue: {
            type: (StringConstructor | DateConstructor | NumberConstructor)[];
        };
        format: {
            type: StringConstructor;
            default: string;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        modelValue?: unknown;
        defaultValue?: unknown;
        format?: unknown;
    } & {
        format: string;
    } & {
        modelValue?: string | number | Date | undefined;
        defaultValue?: string | number | Date | undefined;
    }>, {
        format: string;
    }>;
    YearPicker: import("vue").DefineComponent<{
        modelValue: {
            type: (StringConstructor | DateConstructor | NumberConstructor)[];
        };
        defaultValue: {
            type: (StringConstructor | DateConstructor | NumberConstructor)[];
        };
        format: {
            type: StringConstructor;
            default: string;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        modelValue?: unknown;
        defaultValue?: unknown;
        format?: unknown;
    } & {
        format: string;
    } & {
        modelValue?: string | number | Date | undefined;
        defaultValue?: string | number | Date | undefined;
    }>, {
        format: string;
    }>;
    QuarterPicker: import("vue").DefineComponent<{
        modelValue: {
            type: (StringConstructor | DateConstructor | NumberConstructor)[];
        };
        defaultValue: {
            type: (StringConstructor | DateConstructor | NumberConstructor)[];
        };
        format: {
            type: StringConstructor;
            default: string;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        modelValue?: unknown;
        defaultValue?: unknown;
        format?: unknown;
    } & {
        format: string;
    } & {
        modelValue?: string | number | Date | undefined;
        defaultValue?: string | number | Date | undefined;
    }>, {
        format: string;
    }>;
    RangePicker: import("vue").DefineComponent<{
        mode: {
            type: import("vue").PropType<"month" | "week" | "year" | "date" | "quarter">;
            default: string;
        };
        modelValue: {
            type: import("vue").PropType<(string | number | Date)[]>;
        };
        defaultValue: {
            type: import("vue").PropType<(string | number | Date)[]>;
        };
        pickerValue: {
            type: import("vue").PropType<(string | number | Date)[]>;
        };
        defaultPickerValue: {
            type: import("vue").PropType<(string | number | Date)[]>;
        };
        disabled: {
            type: import("vue").PropType<boolean | boolean[]>;
            default: boolean;
        };
        dayStartOfWeek: {
            type: import("vue").PropType<0 | 1>;
            default: number;
        };
        format: {
            type: StringConstructor;
        };
        showTime: {
            type: BooleanConstructor;
        };
        timePickerProps: {
            type: import("vue").PropType<Partial<import("../time-picker/interface").TimePickerProps>>;
        };
        placeholder: {
            type: import("vue").PropType<string[]>;
        };
        disabledDate: {
            type: import("vue").PropType<(current: Date, type: "start" | "end") => boolean>;
        };
        disabledTime: {
            type: import("vue").PropType<(current: Date, type: "start" | "end") => import("./interface").DisabledTimeProps>;
        };
        separator: {
            type: StringConstructor;
        };
        popupContainer: {
            type: import("vue").PropType<string | HTMLElement | null | undefined>;
        };
        locale: {
            type: import("vue").PropType<Record<string, any>>;
        };
        hideTrigger: {
            type: BooleanConstructor;
        };
        allowClear: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
        };
        error: {
            type: BooleanConstructor;
        };
        size: {
            type: import("vue").PropType<"mini" | "small" | "medium" | "large">;
            default: string;
        };
        shortcuts: {
            type: import("vue").PropType<import("./interface").ShortcutType[]>;
            default: () => never[];
        };
        shortcutsPosition: {
            type: import("vue").PropType<"left" | "right" | "bottom">;
            default: string;
        };
        position: {
            type: import("vue").PropType<"br" | "tr" | "bottom" | "top" | "tl" | "bl">;
            default: string;
        };
        popupVisible: {
            type: BooleanConstructor;
            default: undefined;
        };
        defaultPopupVisible: {
            type: BooleanConstructor;
        };
        triggerProps: {
            type: import("vue").PropType<Record<string, unknown>>;
        };
        unmountOnClose: {
            type: BooleanConstructor;
        };
        onChange: {
            type: import("vue").PropType<import("../_utils/types").EmitType<(dateString: (string | undefined)[] | undefined, date: (Date | undefined)[] | undefined) => void>>;
        };
        onSelect: {
            type: import("vue").PropType<import("../_utils/types").EmitType<(dateString: (string | undefined)[], date: (Date | undefined)[]) => void>>;
        };
        onPopupVisibleChange: {
            type: import("vue").PropType<import("../_utils/types").EmitType<(popupVisible: boolean) => void>>;
        };
        onOk: {
            type: import("vue").PropType<import("../_utils/types").EmitType<(dateString: string[], date: Date[]) => void>>;
        };
        onClear: {
            type: import("vue").PropType<import("../_utils/types").EmitType<() => void>>;
        };
        onSelectShortcut: {
            type: import("vue").PropType<import("../_utils/types").EmitType<(shortcut: import("./interface").ShortcutType) => void>>;
        };
        onPickerValueChange: {
            type: import("vue").PropType<import("../_utils/types").EmitType<(dateString: string[], date: Date[]) => void>>;
        };
    }, {
        prefixCls: string;
        refInput: import("vue").Ref<any>;
        computedFormat: import("vue").ComputedRef<string>;
        computedPlaceholder: import("vue").ComputedRef<string[]>;
        panelVisible: import("vue").ComputedRef<boolean>;
        panelValue: import("vue").ComputedRef<(import("dayjs").Dayjs | undefined)[]>;
        inputValue: import("vue").Ref<(string | undefined)[] | undefined>;
        focusedIndex: import("vue").Ref<number>;
        triggerDisabled: import("vue").ComputedRef<boolean>;
        onPanelVisibleChange: (visible: boolean) => void;
        onInputClear: () => void;
        onInputChange: (e: any) => void;
        onInputPressEnter: () => void;
        rangePanelProps: import("vue").ComputedRef<{
            prefixCls: string;
            format: string;
            value: (import("dayjs").Dayjs | undefined)[];
            showConfirmBtn: boolean;
            confirmBtnDisabled: boolean | undefined;
            timePickerValue: import("dayjs").Dayjs[];
            timePickerProps: {
                visible: boolean;
                size?: "mini" | "small" | "medium" | "large" | undefined;
                disabled?: boolean | undefined;
                modelValue?: string | number | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | (string | number | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => VarDate;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                })[] | undefined;
                error?: boolean | undefined;
                placeholder?: string | string[] | undefined;
                readonly?: boolean | undefined;
                allowClear?: boolean | undefined;
                format: string;
                position?: "br" | "tr" | "bottom" | "top" | "tl" | "bl" | undefined;
                type?: "time" | "time-range" | undefined;
                popupVisible?: boolean | undefined;
                defaultPopupVisible?: boolean | undefined;
                unmountOnClose?: boolean | undefined;
                step?: {
                    hour?: number | undefined;
                    minute?: number | undefined;
                    second?: number | undefined;
                } | undefined;
                triggerProps?: {
                    [x: string]: unknown;
                } | undefined;
                disableConfirm?: boolean | undefined;
                use12Hours?: boolean | undefined;
                disabledHours?: (() => number[]) | undefined;
                disabledMinutes?: ((selectedHour?: number | undefined) => number[]) | undefined;
                disabledSeconds?: ((selectedHour?: number | undefined, selectedMinute?: number | undefined) => number[]) | undefined;
                hideDisabledOptions?: boolean | undefined;
            };
            extra: import("vue").Slot | undefined;
            dateRender: import("vue").Slot | undefined;
            startHeaderProps: {
                headerValue: import("dayjs").Dayjs;
                headerOperations: Pick<any, string>;
                headerIcons: {
                    prev: import("vue").Slot | undefined;
                    prevDouble: import("vue").Slot | undefined;
                    next: import("vue").Slot | undefined;
                    nextDouble: import("vue").Slot | undefined;
                };
            };
            endHeaderProps: {
                headerValue: import("dayjs").Dayjs;
                headerOperations: Pick<any, string>;
                headerIcons: {
                    prev: import("vue").Slot | undefined;
                    prevDouble: import("vue").Slot | undefined;
                    next: import("vue").Slot | undefined;
                    nextDouble: import("vue").Slot | undefined;
                };
            };
            footerValue: {
                clone: () => import("dayjs").Dayjs;
                isValid: () => boolean;
                year: {
                    (): number;
                    (value: number): import("dayjs").Dayjs;
                };
                month: {
                    (): number;
                    (value: number): import("dayjs").Dayjs;
                };
                date: {
                    (): number;
                    (value: number): import("dayjs").Dayjs;
                };
                day: {
                    (): number;
                    (value: number): import("dayjs").Dayjs;
                };
                hour: {
                    (): number;
                    (value: number): import("dayjs").Dayjs;
                };
                minute: {
                    (): number;
                    (value: number): import("dayjs").Dayjs;
                };
                second: {
                    (): number;
                    (value: number): import("dayjs").Dayjs;
                };
                millisecond: {
                    (): number;
                    (value: number): import("dayjs").Dayjs;
                };
                set: (unit: import("dayjs").UnitType, value: number) => import("dayjs").Dayjs;
                get: (unit: import("dayjs").UnitType) => number;
                add: {
                    (value: number, unit?: import("dayjs").ManipulateType | undefined): import("dayjs").Dayjs;
                    (value: number, unit: import("dayjs").QUnitType): import("dayjs").Dayjs;
                };
                subtract: {
                    (value: number, unit?: import("dayjs").ManipulateType | undefined): import("dayjs").Dayjs;
                    (value: number, unit: import("dayjs").QUnitType): import("dayjs").Dayjs;
                };
                startOf: {
                    (unit: import("dayjs").OpUnitType): import("dayjs").Dayjs;
                    (unit: import("dayjs").QUnitType): import("dayjs").Dayjs;
                };
                endOf: {
                    (unit: import("dayjs").OpUnitType): import("dayjs").Dayjs;
                    (unit: import("dayjs").QUnitType): import("dayjs").Dayjs;
                };
                format: (template?: string | undefined) => string;
                diff: (date?: string | number | Date | import("dayjs").Dayjs | null | undefined, unit?: "M" | "month" | "week" | "year" | "day" | "date" | "quarter" | "hour" | "minute" | "second" | "millisecond" | "s" | "y" | "milliseconds" | "seconds" | "minutes" | "hours" | "days" | "months" | "years" | "dates" | "d" | "h" | "m" | "ms" | "weeks" | "w" | "quarters" | "Q" | undefined, float?: boolean | undefined) => number;
                valueOf: () => number;
                unix: () => number;
                daysInMonth: () => number;
                toDate: () => Date;
                toJSON: () => string;
                toISOString: () => string;
                toString: () => string;
                utcOffset: () => number;
                isBefore: {
                    (date: string | number | Date | import("dayjs").Dayjs | null | undefined, unit?: import("dayjs").OpUnitType | undefined): boolean;
                    (date: string | number | Date | import("dayjs").Dayjs | null | undefined, unit?: import("dayjs").QUnitType | undefined): boolean;
                };
                isSame: {
                    (date: string | number | Date | import("dayjs").Dayjs | null | undefined, unit?: import("dayjs").OpUnitType | undefined): boolean;
                    (date: string | number | Date | import("dayjs").Dayjs | null | undefined, unit?: import("dayjs").QUnitType | undefined): boolean;
                };
                isAfter: {
                    (date: string | number | Date | import("dayjs").Dayjs | null | undefined, unit?: import("dayjs").OpUnitType | undefined): boolean;
                    (date: string | number | Date | import("dayjs").Dayjs | null | undefined, unit?: import("dayjs").QUnitType | undefined): boolean;
                };
                locale: {
                    (): string;
                    (preset: string | ILocale, object?: Partial<ILocale> | undefined): import("dayjs").Dayjs;
                };
                isBetween: (a: string | number | Date | import("dayjs").Dayjs | null | undefined, b: string | number | Date | import("dayjs").Dayjs | null | undefined, c?: import("dayjs").OpUnitType | null | undefined, d?: "()" | "[]" | "[)" | "(]" | undefined) => boolean;
                week: {
                    (): number;
                    (value: number): import("dayjs").Dayjs;
                };
                weekYear: () => number;
                quarter: {
                    (): number;
                    (quarter: number): import("dayjs").Dayjs;
                };
            }[];
            disabled: boolean[];
            visible: boolean;
            onCellClick: (date: import("dayjs").Dayjs) => void;
            onCellMouseEnter: (date: import("dayjs").Dayjs) => void;
            onShortcutClick: (value: (import("dayjs").Dayjs | undefined)[], shortcut: import("./interface").ShortcutType) => void;
            onShortcutMouseEnter: (value: (import("dayjs").Dayjs | undefined)[]) => void;
            onShortcutMouseLeave: () => void;
            onConfirm: () => void;
            onTimePickerSelect: (time: import("dayjs").Dayjs, type: "start" | "end") => void;
            mode: any;
            hideTrigger: any;
            dayStartOfWeek: any;
            showTime: any;
            disabledTime: any;
            shortcuts: any;
            disabledDate: any;
            shortcutsPosition: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change" | "clear" | "select" | "update:popupVisible" | "popup-visible-change" | "ok" | "select-shortcut" | "picker-value-change" | "update:pickerValue")[], "update:modelValue" | "change" | "ok" | "clear" | "select" | "update:popupVisible" | "popup-visible-change" | "select-shortcut" | "picker-value-change" | "update:pickerValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        mode?: unknown;
        modelValue?: unknown;
        defaultValue?: unknown;
        pickerValue?: unknown;
        defaultPickerValue?: unknown;
        disabled?: unknown;
        dayStartOfWeek?: unknown;
        format?: unknown;
        showTime?: unknown;
        timePickerProps?: unknown;
        placeholder?: unknown;
        disabledDate?: unknown;
        disabledTime?: unknown;
        separator?: unknown;
        popupContainer?: unknown;
        locale?: unknown;
        hideTrigger?: unknown;
        allowClear?: unknown;
        readonly?: unknown;
        error?: unknown;
        size?: unknown;
        shortcuts?: unknown;
        shortcutsPosition?: unknown;
        position?: unknown;
        popupVisible?: unknown;
        defaultPopupVisible?: unknown;
        triggerProps?: unknown;
        unmountOnClose?: unknown;
        onChange?: unknown;
        onSelect?: unknown;
        onPopupVisibleChange?: unknown;
        onOk?: unknown;
        onClear?: unknown;
        onSelectShortcut?: unknown;
        onPickerValueChange?: unknown;
    } & {
        size: "mini" | "small" | "medium" | "large";
        disabled: boolean | boolean[];
        mode: "month" | "week" | "year" | "date" | "quarter";
        error: boolean;
        readonly: boolean;
        allowClear: boolean;
        position: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
        hideTrigger: boolean;
        defaultPopupVisible: boolean;
        unmountOnClose: boolean;
        dayStartOfWeek: 0 | 1;
        showTime: boolean;
        shortcuts: import("./interface").ShortcutType[];
        shortcutsPosition: "left" | "right" | "bottom";
    } & {
        onChange?: import("../_utils/types").EmitType<(dateString: (string | undefined)[] | undefined, date: (Date | undefined)[] | undefined) => void> | undefined;
        modelValue?: (string | number | Date)[] | undefined;
        defaultValue?: (string | number | Date)[] | undefined;
        locale?: Record<string, any> | undefined;
        placeholder?: string[] | undefined;
        onClear?: import("../_utils/types").EmitType<() => void> | undefined;
        format?: string | undefined;
        onSelect?: import("../_utils/types").EmitType<(dateString: (string | undefined)[], date: (Date | undefined)[]) => void> | undefined;
        separator?: string | undefined;
        popupContainer?: string | HTMLElement | null | undefined;
        onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
        popupVisible?: boolean | undefined;
        triggerProps?: Record<string, unknown> | undefined;
        disabledTime?: ((current: Date, type: "start" | "end") => import("./interface").DisabledTimeProps) | undefined;
        disabledDate?: ((current: Date, type: "start" | "end") => boolean) | undefined;
        timePickerProps?: Partial<import("../time-picker/interface").TimePickerProps> | undefined;
        onOk?: import("../_utils/types").EmitType<(dateString: string[], date: Date[]) => void> | undefined;
        pickerValue?: (string | number | Date)[] | undefined;
        defaultPickerValue?: (string | number | Date)[] | undefined;
        onSelectShortcut?: import("../_utils/types").EmitType<(shortcut: import("./interface").ShortcutType) => void> | undefined;
        onPickerValueChange?: import("../_utils/types").EmitType<(dateString: string[], date: Date[]) => void> | undefined;
    }> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        onClear?: ((...args: any[]) => any) | undefined;
        onSelect?: ((...args: any[]) => any) | undefined;
        "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
        "onPopup-visible-change"?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onSelect-shortcut"?: ((...args: any[]) => any) | undefined;
        "onPicker-value-change"?: ((...args: any[]) => any) | undefined;
        "onUpdate:pickerValue"?: ((...args: any[]) => any) | undefined;
    }, {
        size: "mini" | "small" | "medium" | "large";
        disabled: boolean | boolean[];
        mode: "month" | "week" | "year" | "date" | "quarter";
        error: boolean;
        readonly: boolean;
        allowClear: boolean;
        position: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
        hideTrigger: boolean;
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        unmountOnClose: boolean;
        dayStartOfWeek: 0 | 1;
        showTime: boolean;
        shortcuts: import("./interface").ShortcutType[];
        shortcutsPosition: "left" | "right" | "bottom";
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type DatePickerInstance = InstanceType<typeof _DatePicker>;
export declare type WeekPickerInstance = InstanceType<typeof _WeekPicker>;
export declare type MonthPickerInstance = InstanceType<typeof _MonthPicker>;
export declare type YearPickerInstance = InstanceType<typeof _YearPicker>;
export declare type QuarterPickerInstance = InstanceType<typeof _QuarterPicker>;
export declare type RangePickerInstance = InstanceType<typeof _RangePicker>;
export { _WeekPicker as WeekPicker, _MonthPicker as MonthPicker, _YearPicker as YearPicker, _QuarterPicker as QuarterPicker, _RangePicker as RangePicker, };
export default DatePicker;
