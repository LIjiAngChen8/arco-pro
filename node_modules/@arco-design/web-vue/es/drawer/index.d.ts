import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Drawer from './drawer';
declare const Drawer: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            footer: boolean;
            mask: boolean;
            height: string | number;
            visible: boolean;
            defaultVisible: boolean;
            closable: boolean;
            width: string | number;
            popupContainer: string | HTMLElement | null | undefined;
            unmountOnClose: boolean;
            renderToBody: boolean;
            maskClosable: boolean;
            placement: "left" | "right" | "bottom" | "top";
            okLoading: boolean;
        }> & Omit<Readonly<{
            visible?: unknown;
            defaultVisible?: unknown;
            placement?: unknown;
            title?: unknown;
            mask?: unknown;
            maskClosable?: unknown;
            closable?: unknown;
            okText?: unknown;
            cancelText?: unknown;
            okLoading?: unknown;
            okButtonProps?: unknown;
            cancelButtonProps?: unknown;
            unmountOnClose?: unknown;
            width?: unknown;
            height?: unknown;
            popupContainer?: unknown;
            drawerStyle?: unknown;
            onBeforeOk?: unknown;
            onBeforeCancel?: unknown;
            renderToBody?: unknown;
            footer?: unknown;
        } & {
            footer: boolean;
            mask: boolean;
            height: string | number;
            visible: boolean;
            defaultVisible: boolean;
            closable: boolean;
            width: string | number;
            popupContainer: string | HTMLElement | null | undefined;
            unmountOnClose: boolean;
            renderToBody: boolean;
            maskClosable: boolean;
            placement: "left" | "right" | "bottom" | "top";
            okLoading: boolean;
        } & {
            okText?: string | undefined;
            cancelText?: string | undefined;
            title?: string | undefined;
            okButtonProps?: Record<string, any> | undefined;
            cancelButtonProps?: Record<string, any> | undefined;
            drawerStyle?: import("vue").CSSProperties | undefined;
            onBeforeOk?: ((done: (closed: boolean) => void) => boolean | void) | undefined;
            onBeforeCancel?: (() => boolean) | undefined;
        }> & {
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onOk?: ((...args: any[]) => any) | undefined;
            onOpen?: ((...args: any[]) => any) | undefined;
            onCancel?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "footer" | "mask" | "height" | "visible" | "defaultVisible" | "closable" | "width" | "popupContainer" | "unmountOnClose" | "renderToBody" | "maskClosable" | "placement" | "okLoading">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "open" | "update:visible" | "close" | "cancel" | "ok", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            visible?: unknown;
            defaultVisible?: unknown;
            placement?: unknown;
            title?: unknown;
            mask?: unknown;
            maskClosable?: unknown;
            closable?: unknown;
            okText?: unknown;
            cancelText?: unknown;
            okLoading?: unknown;
            okButtonProps?: unknown;
            cancelButtonProps?: unknown;
            unmountOnClose?: unknown;
            width?: unknown;
            height?: unknown;
            popupContainer?: unknown;
            drawerStyle?: unknown;
            onBeforeOk?: unknown;
            onBeforeCancel?: unknown;
            renderToBody?: unknown;
            footer?: unknown;
        } & {
            footer: boolean;
            mask: boolean;
            height: string | number;
            visible: boolean;
            defaultVisible: boolean;
            closable: boolean;
            width: string | number;
            popupContainer: string | HTMLElement | null | undefined;
            unmountOnClose: boolean;
            renderToBody: boolean;
            maskClosable: boolean;
            placement: "left" | "right" | "bottom" | "top";
            okLoading: boolean;
        } & {
            okText?: string | undefined;
            cancelText?: string | undefined;
            title?: string | undefined;
            okButtonProps?: Record<string, any> | undefined;
            cancelButtonProps?: Record<string, any> | undefined;
            drawerStyle?: import("vue").CSSProperties | undefined;
            onBeforeOk?: ((done: (closed: boolean) => void) => boolean | void) | undefined;
            onBeforeCancel?: (() => boolean) | undefined;
        }> & {
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onOk?: ((...args: any[]) => any) | undefined;
            onOpen?: ((...args: any[]) => any) | undefined;
            onCancel?: ((...args: any[]) => any) | undefined;
        }, {
            prefixCls: string;
            style: import("vue").ComputedRef<import("vue").CSSProperties>;
            t: (key: string, ...args: any[]) => string;
            mounted: import("vue").Ref<boolean>;
            computedVisible: import("vue").ComputedRef<boolean>;
            mergedOkLoading: import("vue").ComputedRef<boolean>;
            zIndex: import("vue").ComputedRef<number>;
            handleOk: () => void;
            handleCancel: () => void;
            handleOpen: () => void;
            handleClose: () => void;
            handleMask: () => void;
            isFixed: import("vue").ComputedRef<boolean>;
            containerNode: import("vue").ComputedRef<HTMLElement | "body">;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("open" | "update:visible" | "close" | "cancel" | "ok")[], string, {
            footer: boolean;
            mask: boolean;
            height: string | number;
            visible: boolean;
            defaultVisible: boolean;
            closable: boolean;
            width: string | number;
            popupContainer: string | HTMLElement | null | undefined;
            unmountOnClose: boolean;
            renderToBody: boolean;
            maskClosable: boolean;
            placement: "left" | "right" | "bottom" | "top";
            okLoading: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        visible?: unknown;
        defaultVisible?: unknown;
        placement?: unknown;
        title?: unknown;
        mask?: unknown;
        maskClosable?: unknown;
        closable?: unknown;
        okText?: unknown;
        cancelText?: unknown;
        okLoading?: unknown;
        okButtonProps?: unknown;
        cancelButtonProps?: unknown;
        unmountOnClose?: unknown;
        width?: unknown;
        height?: unknown;
        popupContainer?: unknown;
        drawerStyle?: unknown;
        onBeforeOk?: unknown;
        onBeforeCancel?: unknown;
        renderToBody?: unknown;
        footer?: unknown;
    } & {
        footer: boolean;
        mask: boolean;
        height: string | number;
        visible: boolean;
        defaultVisible: boolean;
        closable: boolean;
        width: string | number;
        popupContainer: string | HTMLElement | null | undefined;
        unmountOnClose: boolean;
        renderToBody: boolean;
        maskClosable: boolean;
        placement: "left" | "right" | "bottom" | "top";
        okLoading: boolean;
    } & {
        okText?: string | undefined;
        cancelText?: string | undefined;
        title?: string | undefined;
        okButtonProps?: Record<string, any> | undefined;
        cancelButtonProps?: Record<string, any> | undefined;
        drawerStyle?: import("vue").CSSProperties | undefined;
        onBeforeOk?: ((done: (closed: boolean) => void) => boolean | void) | undefined;
        onBeforeCancel?: (() => boolean) | undefined;
    }> & {
        "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        prefixCls: string;
        style: import("vue").ComputedRef<import("vue").CSSProperties>;
        t: (key: string, ...args: any[]) => string;
        mounted: import("vue").Ref<boolean>;
        computedVisible: import("vue").ComputedRef<boolean>;
        mergedOkLoading: import("vue").ComputedRef<boolean>;
        zIndex: import("vue").ComputedRef<number>;
        handleOk: () => void;
        handleCancel: () => void;
        handleOpen: () => void;
        handleClose: () => void;
        handleMask: () => void;
        isFixed: import("vue").ComputedRef<boolean>;
        containerNode: import("vue").ComputedRef<HTMLElement | "body">;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    visible?: unknown;
    defaultVisible?: unknown;
    placement?: unknown;
    title?: unknown;
    mask?: unknown;
    maskClosable?: unknown;
    closable?: unknown;
    okText?: unknown;
    cancelText?: unknown;
    okLoading?: unknown;
    okButtonProps?: unknown;
    cancelButtonProps?: unknown;
    unmountOnClose?: unknown;
    width?: unknown;
    height?: unknown;
    popupContainer?: unknown;
    drawerStyle?: unknown;
    onBeforeOk?: unknown;
    onBeforeCancel?: unknown;
    renderToBody?: unknown;
    footer?: unknown;
} & {
    footer: boolean;
    mask: boolean;
    height: string | number;
    visible: boolean;
    defaultVisible: boolean;
    closable: boolean;
    width: string | number;
    popupContainer: string | HTMLElement | null | undefined;
    unmountOnClose: boolean;
    renderToBody: boolean;
    maskClosable: boolean;
    placement: "left" | "right" | "bottom" | "top";
    okLoading: boolean;
} & {
    okText?: string | undefined;
    cancelText?: string | undefined;
    title?: string | undefined;
    okButtonProps?: Record<string, any> | undefined;
    cancelButtonProps?: Record<string, any> | undefined;
    drawerStyle?: import("vue").CSSProperties | undefined;
    onBeforeOk?: ((done: (closed: boolean) => void) => boolean | void) | undefined;
    onBeforeCancel?: (() => boolean) | undefined;
}> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onOk?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    onCancel?: ((...args: any[]) => any) | undefined;
}, {
    prefixCls: string;
    style: import("vue").ComputedRef<import("vue").CSSProperties>;
    t: (key: string, ...args: any[]) => string;
    mounted: import("vue").Ref<boolean>;
    computedVisible: import("vue").ComputedRef<boolean>;
    mergedOkLoading: import("vue").ComputedRef<boolean>;
    zIndex: import("vue").ComputedRef<number>;
    handleOk: () => void;
    handleCancel: () => void;
    handleOpen: () => void;
    handleClose: () => void;
    handleMask: () => void;
    isFixed: import("vue").ComputedRef<boolean>;
    containerNode: import("vue").ComputedRef<HTMLElement | "body">;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("open" | "update:visible" | "close" | "cancel" | "ok")[], "cancel" | "ok" | "open" | "update:visible" | "close", {
    footer: boolean;
    mask: boolean;
    height: string | number;
    visible: boolean;
    defaultVisible: boolean;
    closable: boolean;
    width: string | number;
    popupContainer: string | HTMLElement | null | undefined;
    unmountOnClose: boolean;
    renderToBody: boolean;
    maskClosable: boolean;
    placement: "left" | "right" | "bottom" | "top";
    okLoading: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type DrawerInstance = InstanceType<typeof _Drawer>;
export default Drawer;
