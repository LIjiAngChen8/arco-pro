import type { PropType } from 'vue';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<string | number | boolean>;
        default: undefined;
    };
    defaultChecked: {
        type: BooleanConstructor;
        default: boolean;
    };
    value: {
        type: PropType<string | number | boolean>;
        default: boolean;
    };
    type: {
        type: PropType<"button" | "radio">;
        default: string;
        validator: (value: any) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    onChange: {
        type: PropType<EmitType<(value: string | number | boolean, e: Event) => void>>;
    };
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    inputRef: import("vue").Ref<HTMLInputElement | null>;
    mergedType: import("vue").ComputedRef<"button" | "radio">;
    mergedDisabled: import("vue").ComputedRef<boolean>;
    computedChecked: import("vue").ComputedRef<boolean>;
    handleChange: (e: Event) => void;
    handleClick: (e: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change")[], "update:modelValue" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultChecked?: unknown;
    value?: unknown;
    type?: unknown;
    disabled?: unknown;
    onChange?: unknown;
} & {
    disabled: boolean;
    defaultChecked: boolean;
    value: string | number | boolean;
    type: "button" | "radio";
} & {
    onChange?: EmitType<(value: string | number | boolean, e: Event) => void> | undefined;
    modelValue?: string | number | boolean | undefined;
}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    modelValue: string | number | boolean;
    defaultChecked: boolean;
    value: string | number | boolean;
    type: "button" | "radio";
}>;
export default _default;
