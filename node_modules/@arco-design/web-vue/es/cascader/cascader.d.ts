import { PropType } from 'vue';
import { CascaderOption, CascaderOptionInfo } from './interface';
import { Data, EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    pathMode: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined>;
    };
    defaultValue: {
        type: PropType<string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined>;
        default: (props: Data) => never[] | "" | undefined;
    };
    options: {
        type: PropType<CascaderOption[]>;
        default: () => never[];
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowSearch: {
        type: BooleanConstructor;
        default: (props: Data) => boolean;
    };
    allowClear: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputValue: {
        type: StringConstructor;
        default: undefined;
    };
    defaultInputValue: {
        type: StringConstructor;
        default: string;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: undefined;
    };
    expandTrigger: {
        type: StringConstructor;
        default: string;
    };
    defaultPopupVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: StringConstructor;
    filterOption: {
        type: PropType<(inputValue: string, optionInfo: CascaderOptionInfo) => boolean>;
    };
    popupContainer: {
        type: PropType<string | HTMLElement | null | undefined>;
    };
    formatLabel: {
        type: PropType<(options: CascaderOptionInfo[]) => string>;
    };
    triggerProps: {
        type: PropType<Partial<{
            disabled: boolean;
            animationName: string;
            position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            trigger: "click" | "focus" | "hover" | "contextMenu" | ("click" | "focus" | "hover" | "contextMenu")[];
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
        }> & Omit<Readonly<{
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            trigger?: unknown;
            position?: unknown;
            disabled?: unknown;
            popupOffset?: unknown;
            popupTranslate?: unknown;
            showArrow?: unknown;
            alignPoint?: unknown;
            popupHoverStay?: unknown;
            blurToClose?: unknown;
            clickToClose?: unknown;
            clickOutsideToClose?: unknown;
            unmountOnClose?: unknown;
            contentClass?: unknown;
            contentStyle?: unknown;
            arrowClass?: unknown;
            arrowStyle?: unknown;
            popupStyle?: unknown;
            animationName?: unknown;
            duration?: unknown;
            mouseEnterDelay?: unknown;
            mouseLeaveDelay?: unknown;
            focusDelay?: unknown;
            autoFitPopupWidth?: unknown;
            autoFitPopupMinWidth?: unknown;
            autoFixPosition?: unknown;
            popupContainer?: unknown;
            updateAtScroll?: unknown;
            autoFitTransformOrigin?: unknown;
            hideEmpty?: unknown;
            openedCls?: unknown;
            autoFitPosition?: unknown;
            renderToBody?: unknown;
            preventFocus?: unknown;
            onPopupVisibleChange?: unknown;
        } & {
            disabled: boolean;
            animationName: string;
            position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
            defaultPopupVisible: boolean;
            trigger: "click" | "focus" | "hover" | "contextMenu" | ("click" | "focus" | "hover" | "contextMenu")[];
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
        } & {
            popupContainer?: string | HTMLElement | undefined;
            onPopupVisibleChange?: EmitType<(popupVisible: boolean) => void> | undefined;
            popupVisible?: boolean | undefined;
            popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
            contentClass?: import("../_utils/types").ClassName | undefined;
            contentStyle?: import("vue").CSSProperties | undefined;
            arrowClass?: import("../_utils/types").ClassName | undefined;
            arrowStyle?: import("vue").CSSProperties | undefined;
            popupStyle?: import("vue").CSSProperties | undefined;
            duration?: import("../_utils/types").AnimationDuration | undefined;
            openedCls?: string | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
            onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">>;
    };
    checkStrictly: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadMore: {
        type: PropType<(option: CascaderOptionInfo, done: (children?: CascaderOption[] | undefined) => void) => void>;
    };
    onChange: {
        type: PropType<EmitType<(value: string | number | Array<string | number> | undefined | (string | number | Array<string | number>)[]) => void>>;
    };
    onInputValueChange: {
        type: PropType<EmitType<(inputValue: string) => void>>;
    };
    onPopupVisibleChange: {
        type: PropType<EmitType<(popupVisible: boolean) => void>>;
    };
    onClear: {
        type: PropType<EmitType<() => void>>;
    };
    onSearch: {
        type: PropType<EmitType<(inputValue: string) => void>>;
    };
}, {
    optionInfos: import("vue").Ref<{
        label: string;
        disabled: boolean;
        key: string;
        level: number;
        index: number;
        isLeaf: boolean;
        path: any[];
        children?: any[] | undefined;
        parent?: any | undefined;
        totalLeafOptions?: number | undefined;
        value: string | number;
        render?: import("vue").RenderFunction | undefined;
        tagProps?: {
            size?: "mini" | "small" | "medium" | "large" | undefined;
            defaultChecked?: boolean | undefined;
            loading?: boolean | undefined;
            visible?: boolean | undefined;
            defaultVisible?: boolean | undefined;
            closable?: boolean | undefined;
            checkable?: boolean | undefined;
            checked?: boolean | undefined;
            style?: unknown;
            readonly color?: string | undefined;
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
            readonly onClose?: (EmitType<(event: MouseEvent) => void> & ((...args: any[]) => any)) | undefined;
            readonly onCheck?: (EmitType<(checked: boolean, event: MouseEvent) => void> & ((...args: any[]) => any)) | undefined;
            key?: string | number | symbol | undefined;
            ref?: any;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
        } | undefined;
    }[]>;
    computedKeys: import("vue").ComputedRef<string[]>;
    filteredLeafOptions: import("vue").ComputedRef<CascaderOptionInfo[]>;
    selectedPath: import("vue").Ref<string[]>;
    activeKey: import("vue").Ref<string | undefined>;
    displayColumns: import("vue").ComputedRef<CascaderOptionInfo[][]>;
    computedInputValue: import("vue").ComputedRef<string>;
    computedPopupVisible: import("vue").ComputedRef<boolean>;
    handleClear: (e: MouseEvent) => void;
    selectViewValue: import("vue").ComputedRef<{
        value: string;
        label: string;
        closable: boolean;
        tagProps: (Partial<{
            size: "mini" | "small" | "medium" | "large";
            defaultChecked: boolean;
            loading: boolean;
            visible: boolean;
            defaultVisible: boolean;
            closable: boolean;
            checkable: boolean;
            checked: boolean;
        }> & Omit<Readonly<{
            color?: unknown;
            size?: unknown;
            visible?: unknown;
            defaultVisible?: unknown;
            loading?: unknown;
            closable?: unknown;
            checkable?: unknown;
            checked?: unknown;
            defaultChecked?: unknown;
            onClose?: unknown;
            onCheck?: unknown;
        } & {
            size: "mini" | "small" | "medium" | "large";
            defaultChecked: boolean;
            loading: boolean;
            defaultVisible: boolean;
            closable: boolean;
            checkable: boolean;
        } & {
            visible?: boolean | undefined;
            color?: string | undefined;
            onClose?: EmitType<(event: MouseEvent) => void> | undefined;
            onCheck?: EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
            checked?: boolean | undefined;
        }> & {
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "defaultChecked" | "loading" | "visible" | "defaultVisible" | "closable" | "checkable" | "checked">) | undefined;
    }[] | {
        value: string;
        label: string;
        closable: boolean;
        tagProps: (Partial<{
            size: "mini" | "small" | "medium" | "large";
            defaultChecked: boolean;
            loading: boolean;
            visible: boolean;
            defaultVisible: boolean;
            closable: boolean;
            checkable: boolean;
            checked: boolean;
        }> & Omit<Readonly<{
            color?: unknown;
            size?: unknown;
            visible?: unknown;
            defaultVisible?: unknown;
            loading?: unknown;
            closable?: unknown;
            checkable?: unknown;
            checked?: unknown;
            defaultChecked?: unknown;
            onClose?: unknown;
            onCheck?: unknown;
        } & {
            size: "mini" | "small" | "medium" | "large";
            defaultChecked: boolean;
            loading: boolean;
            defaultVisible: boolean;
            closable: boolean;
            checkable: boolean;
        } & {
            visible?: boolean | undefined;
            color?: string | undefined;
            onClose?: EmitType<(event: MouseEvent) => void> | undefined;
            onCheck?: EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
            checked?: boolean | undefined;
        }> & {
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "defaultChecked" | "loading" | "visible" | "defaultVisible" | "closable" | "checkable" | "checked">) | undefined;
    } | undefined>;
    handleInputValueChange: (value: string, reason: string) => void;
    showSearchPanel: import("vue").ComputedRef<boolean>;
    handlePopupVisibleChange: (visible: boolean) => void;
    handleFocus: (e: Event) => void;
    handleBlur: (e: Event) => void;
    handleRemove: (key: string) => void;
    handleKeyDown: (event: KeyboardEvent) => void;
    totalLevel: import("vue").Ref<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change" | "clear" | "inputValueChange" | "focus" | "blur" | "popupVisibleChange" | "search")[], "update:modelValue" | "change" | "clear" | "inputValueChange" | "focus" | "blur" | "popupVisibleChange" | "search", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    pathMode?: unknown;
    multiple?: unknown;
    modelValue?: unknown;
    defaultValue?: unknown;
    options?: unknown;
    disabled?: unknown;
    error?: unknown;
    allowSearch?: unknown;
    allowClear?: unknown;
    inputValue?: unknown;
    defaultInputValue?: unknown;
    popupVisible?: unknown;
    expandTrigger?: unknown;
    defaultPopupVisible?: unknown;
    placeholder?: unknown;
    filterOption?: unknown;
    popupContainer?: unknown;
    formatLabel?: unknown;
    triggerProps?: unknown;
    checkStrictly?: unknown;
    loadMore?: unknown;
    onChange?: unknown;
    onInputValueChange?: unknown;
    onPopupVisibleChange?: unknown;
    onClear?: unknown;
    onSearch?: unknown;
} & {
    disabled: boolean;
    defaultValue: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
    multiple: boolean;
    error: boolean;
    options: CascaderOption[];
    allowClear: boolean;
    defaultInputValue: string;
    allowSearch: boolean;
    defaultPopupVisible: boolean;
    expandTrigger: string;
    checkStrictly: boolean;
    pathMode: boolean;
} & {
    onChange?: EmitType<(value: string | number | Array<string | number> | undefined | (string | number | Array<string | number>)[]) => void> | undefined;
    modelValue?: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
    placeholder?: string | undefined;
    inputValue?: string | undefined;
    filterOption?: ((inputValue: string, optionInfo: CascaderOptionInfo) => boolean) | undefined;
    onClear?: EmitType<() => void> | undefined;
    onInputValueChange?: EmitType<(inputValue: string) => void> | undefined;
    formatLabel?: ((options: CascaderOptionInfo[]) => string) | undefined;
    popupContainer?: string | HTMLElement | null | undefined;
    onPopupVisibleChange?: EmitType<(popupVisible: boolean) => void> | undefined;
    popupVisible?: boolean | undefined;
    loadMore?: ((option: CascaderOptionInfo, done: (children?: CascaderOption[] | undefined) => void) => void) | undefined;
    onSearch?: EmitType<(inputValue: string) => void> | undefined;
    triggerProps?: (Partial<{
        disabled: boolean;
        animationName: string;
        position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        trigger: "click" | "focus" | "hover" | "contextMenu" | ("click" | "focus" | "hover" | "contextMenu")[];
        popupOffset: number;
        showArrow: boolean;
        alignPoint: boolean;
        popupHoverStay: boolean;
        blurToClose: boolean;
        clickToClose: boolean;
        clickOutsideToClose: boolean;
        unmountOnClose: boolean;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        focusDelay: number;
        autoFitPopupWidth: boolean;
        autoFitPopupMinWidth: boolean;
        autoFixPosition: boolean;
        updateAtScroll: boolean;
        autoFitTransformOrigin: boolean;
        hideEmpty: boolean;
        autoFitPosition: boolean;
        renderToBody: boolean;
        preventFocus: boolean;
    }> & Omit<Readonly<{
        popupVisible?: unknown;
        defaultPopupVisible?: unknown;
        trigger?: unknown;
        position?: unknown;
        disabled?: unknown;
        popupOffset?: unknown;
        popupTranslate?: unknown;
        showArrow?: unknown;
        alignPoint?: unknown;
        popupHoverStay?: unknown;
        blurToClose?: unknown;
        clickToClose?: unknown;
        clickOutsideToClose?: unknown;
        unmountOnClose?: unknown;
        contentClass?: unknown;
        contentStyle?: unknown;
        arrowClass?: unknown;
        arrowStyle?: unknown;
        popupStyle?: unknown;
        animationName?: unknown;
        duration?: unknown;
        mouseEnterDelay?: unknown;
        mouseLeaveDelay?: unknown;
        focusDelay?: unknown;
        autoFitPopupWidth?: unknown;
        autoFitPopupMinWidth?: unknown;
        autoFixPosition?: unknown;
        popupContainer?: unknown;
        updateAtScroll?: unknown;
        autoFitTransformOrigin?: unknown;
        hideEmpty?: unknown;
        openedCls?: unknown;
        autoFitPosition?: unknown;
        renderToBody?: unknown;
        preventFocus?: unknown;
        onPopupVisibleChange?: unknown;
    } & {
        disabled: boolean;
        animationName: string;
        position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
        defaultPopupVisible: boolean;
        trigger: "click" | "focus" | "hover" | "contextMenu" | ("click" | "focus" | "hover" | "contextMenu")[];
        popupOffset: number;
        showArrow: boolean;
        alignPoint: boolean;
        popupHoverStay: boolean;
        blurToClose: boolean;
        clickToClose: boolean;
        clickOutsideToClose: boolean;
        unmountOnClose: boolean;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        focusDelay: number;
        autoFitPopupWidth: boolean;
        autoFitPopupMinWidth: boolean;
        autoFixPosition: boolean;
        updateAtScroll: boolean;
        autoFitTransformOrigin: boolean;
        hideEmpty: boolean;
        autoFitPosition: boolean;
        renderToBody: boolean;
        preventFocus: boolean;
    } & {
        popupContainer?: string | HTMLElement | undefined;
        onPopupVisibleChange?: EmitType<(popupVisible: boolean) => void> | undefined;
        popupVisible?: boolean | undefined;
        popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
        contentClass?: import("../_utils/types").ClassName | undefined;
        contentStyle?: import("vue").CSSProperties | undefined;
        arrowClass?: import("../_utils/types").ClassName | undefined;
        arrowStyle?: import("vue").CSSProperties | undefined;
        popupStyle?: import("vue").CSSProperties | undefined;
        duration?: import("../_utils/types").AnimationDuration | undefined;
        openedCls?: string | undefined;
    }> & {
        "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
        onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">) | undefined;
}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    onInputValueChange?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    defaultValue: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
    multiple: boolean;
    error: boolean;
    options: CascaderOption[];
    inputValue: string;
    allowClear: boolean;
    defaultInputValue: string;
    allowSearch: boolean;
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    expandTrigger: string;
    checkStrictly: boolean;
    pathMode: boolean;
}>;
export default _default;
