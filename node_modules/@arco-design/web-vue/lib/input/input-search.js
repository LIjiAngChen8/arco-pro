"use strict";
var vue = require("vue");
var globalConfig = require("../_utils/global-config.js");
var iconHover = require("../_components/icon-hover.js");
var index$2 = require("../icon/icon-search/index.js");
var index$1 = require("../icon/icon-loading/index.js");
var index = require("../button/index.js");
var input = require("./input.js");
var inputGroup = require("./input-group.js");
var constant = require("../_utils/constant.js");
var InputSearch = vue.defineComponent({
  name: "InputSearch",
  inheritAttrs: false,
  props: {
    searchButton: {
      type: Boolean,
      default: false
    },
    loading: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: "medium",
      validator: (value) => {
        return constant.SIZES.includes(value);
      }
    },
    onSearch: {
      type: [Function, Array]
    }
  },
  emits: [
    "search"
  ],
  setup(props, {
    emit,
    slots,
    attrs
  }) {
    const prefixCls = globalConfig.getPrefixCls("input-search");
    const inputRef = vue.ref();
    const handleClick = (e) => {
      if (inputRef.value.inputRef) {
        emit("search", inputRef.value.inputRef.value, e);
      }
    };
    const renderSuffix = () => {
      var _a;
      return vue.createVNode(vue.Fragment, null, [props.loading ? vue.createVNode(index$1, null, null) : vue.createVNode(iconHover, {
        "onClick": handleClick
      }, {
        default: () => [vue.createVNode(index$2, null, null)]
      }), (_a = slots.suffix) == null ? void 0 : _a.call(slots)]);
    };
    const renderInput = () => {
      const inputSlots = {
        prepend: slots.prepend,
        prefix: slots.prefix,
        suffix: props.searchButton ? slots.suffix : renderSuffix,
        append: slots.append
      };
      return vue.createVNode(input, vue.mergeProps({
        "ref": inputRef,
        "size": props.size
      }, attrs), inputSlots);
    };
    const render = () => {
      if (props.searchButton) {
        return vue.createVNode(inputGroup, null, {
          default: () => [renderInput(), vue.createVNode(index["default"], {
            "type": "primary",
            "size": props.size,
            "class": `${prefixCls}-btn`,
            "loading": props.loading,
            "onClick": handleClick
          }, {
            icon: () => props.loading ? vue.createVNode(index$1, null, null) : vue.createVNode(index$2, null, null)
          })]
        });
      }
      return renderInput();
    };
    return {
      inputRef,
      render
    };
  },
  methods: {
    focus() {
      var _a;
      (_a = this.inputRef) == null ? void 0 : _a.focus();
    },
    blur() {
      var _a;
      (_a = this.inputRef) == null ? void 0 : _a.blur();
    }
  },
  render() {
    return this.render();
  }
});
module.exports = InputSearch;
